source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = irisdata[3, ]
x
x = irisdata[[3, ]]
x = irisdata[3, ,drop=TRUE]
x
typeof(x)
x[0]
x[1]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = vect(irisdata[3, ,])
x = vector(irisdata[3, ,])
?vector
x = c(irisdata[3, ,])
xx
x
x = (irisdata[3, ,])
x
x = c(irisdata[3, ,])
y = c(irisdata[4, ,])
x
y
z  = c(x,y)
z
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
irisdata[[3]] =5
View(irisdata)
irisdata[5,4] = 6
View(irisdata)
irisdata[5,7] = 6
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
irisdata[[7]][3] =5
irisdata[7,100] =5
?sapply
?mapply
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
?which.min
which.min(irisdata[3, ])
source('~/Desktop/EDA/cluster.R', echo=TRUE)
which.min(irisdata[11, ])
which.min(irisdata[100, ])
5==3
source('~/Desktop/EDA/cluster.R', echo=TRUE)
?apply
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
mean(irisdata[, 2])
mean(irisdata[, 2:3])
mean(irisdata[, 1:2])
swum(irisdata[, 1:2])
sum(irisdata[, 1:2])
?colMeans
colMeans(irisdata[, 1:2])
source('~/Desktop/EDA/cluster.R', echo=TRUE)
irisdata
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
colMeans(irisdata[, 1:2])
y = colMeans(irisdata[, 1:2])
typeof(y)
class(y)
y[1]
irisdata[151, ] =colMeans(irisdata)
irisdata
irisdata[151, ] =colMeans(irisdata[, irisdata$Petal.Width==0.2])
irisdata[151, ] =colMeans(irisdata[irisdata$Petal.Width==0.2])
irisdata[irisdata$Petal.Width==0.2]
irisdata[irisdata$Petal.Width==0.2, ]
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/EDA/cluster.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = list(3,4)
y = list(3,5)
x==y
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x = c(3,4)
y = c(3,5)
x==y
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?rep
rep(0,4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?apply
source('~/.active-rstudio-document', echo=TRUE)
?sapply
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
x=NULL
x==NULL
is.null(X)
is.null(x)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_2.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_Final.R', echo=TRUE)
source('~/Desktop/EDA/Cluster_Final.R', echo=TRUE)
library(ggplot2)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
with(mydf,factor(c(type, tuple)))
with(mydf,factor(c(as.character(type), as.character(tuple))))
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
mydf
with(mydf,factor(c(type, tuple)))
with(mydf,factor(c(as.character(type), as.character(tuple))))
head(mydf)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
greeks <- list(bquote(rho==.(value1)), bquote(rho==.(value2)), bquote(rho==.(value3)))
greeks <- list(bquote(rho==.(0)), bquote(rho==.(1)), bquote(rho==.(2)))
greeks
paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")
?bquote
bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = ""))
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
x <- seq(0,1,length=100)
beta1 <- dbeta(x, 0.5, 0.5)
beta2 <- dbeta(x, 5, 1)
beta3 <- dbeta(x, 1, 3)
beta4 <- dbeta(x, 2, 2)
beta5 <- dbeta(x, 2, 5)
df <- data.frame(x,beta1, beta2, beta3, beta4, beta5)
df <- gather(df, func, val, -x)
bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = ""))
greeks <- list(bquote(paste("{", alpha, ",", beta, "} = ", .(0.5,0.5)), collapse = "")), bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")))
gg <- ggplot(df, aes(x=x, y=val, group=func)) +
geom_line(aes(color=func)) +
scale_y_continuous(expand=c(0, 0)) +
scale_color_manual(name="Beta params",
values=c("red", "green", "blue", "violet", "black"),
labels=greeks)+
labs(x="\nx value", y="PDF\n",
title="Beta Probability Distribution Functions\n")+
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
gg
x <- seq(0,1,length=100)
beta1 <- dbeta(x, 0.5, 0.5)
beta2 <- dbeta(x, 5, 1)
beta3 <- dbeta(x, 1, 3)
beta4 <- dbeta(x, 2, 2)
beta5 <- dbeta(x, 2, 5)
df <- data.frame(x,beta1, beta2, beta3, beta4, beta5)
df <- gather(df, func, val, -x)
bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = ""))
greeks <- list(bquote(paste("{", alpha, ",", beta, "} = ", .(paste(0.5,","0.5,sep="")), collapse = "")), bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")))
gg <- ggplot(df, aes(x=x, y=val, group=func)) +
geom_line(aes(color=func)) +
scale_y_continuous(expand=c(0, 0)) +
scale_color_manual(name="Beta params",
values=c("red", "green", "blue", "violet", "black"),
labels=greeks)+
labs(x="\nx value", y="PDF\n",
title="Beta Probability Distribution Functions\n")+
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
gg
x <- seq(0,1,length=100)
beta1 <- dbeta(x, 0.5, 0.5)
beta2 <- dbeta(x, 5, 1)
beta3 <- dbeta(x, 1, 3)
beta4 <- dbeta(x, 2, 2)
beta5 <- dbeta(x, 2, 5)
df <- data.frame(x,beta1, beta2, beta3, beta4, beta5)
df <- gather(df, func, val, -x)
bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = ""))
greeks <- list(bquote(paste("{", alpha, ",", beta, "} = ", .(paste(0.5,",",0.5,sep="")), collapse = "")), bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(c(0.5,0.5)), collapse = "")))
gg <- ggplot(df, aes(x=x, y=val, group=func)) +
geom_line(aes(color=func)) +
scale_y_continuous(expand=c(0, 0)) +
scale_color_manual(name="Beta params",
values=c("red", "green", "blue", "violet", "black"),
labels=greeks)+
labs(x="\nx value", y="PDF\n",
title="Beta Probability Distribution Functions\n")+
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
gg
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
x_vals <- seq(0,1,length=100)
#These tuple values can be replaced and the graphs will update accordingly
my_tuple_values <- list(c(0.5,0.5), c(5,1), c(1,3), c(2,2), c(2,5))
mydf <- data.frame()
df_list <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- dbeta(x_vals,alpha_param,beta_param)
type <- rep("pdf", length(y_val))
my_value <- bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",alpha_param,",",beta_param, "}", sep = "")), collapse = ""))
tuple <- rep(my_value,length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mypdf <- do.call(rbind,df_list)
df_list_2 <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- pbeta(x_vals,alpha_param,beta_param)
type <- rep("cdf", length(y_val))
my_value <- bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",alpha_param,",",beta_param, "}", sep = "")), collapse = ""))
tuple <- rep(my_value,length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mycdf <- do.call(rbind,df_list_2)
mydf <- rbind(mypdf, mycdf)
my_plot <- ggplot(mydf, aes(x=x_vals, y=y_val, color = tuple)) +
geom_line() +
facet_grid(tuple ~ type, scales = "free") +
theme(strip.text = element_text(size = 11)) +
theme(axis.text=element_text(size=10),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22)) +
labs(x="\nx value", y="Distribution Function Value\n",title="Beta Distribution Functions\n")
my_plot
bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",alpha_param,",",beta_param, "}", sep = "")), collapse = ""))
bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",1,",",5, "}", sep = "")), collapse = ""))
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
mydf
head(mydf)
x_vals <- seq(0,1,length=100)
#These tuple values can be replaced and the graphs will update accordingly
my_tuple_values <- list(c(0.5,0.5), c(5,1), c(1,3), c(2,2), c(2,5))
mydf <- data.frame()
df_list <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- dbeta(x_vals,alpha_param,beta_param)
type <- rep("pdf", length(y_val))
tuple <- rep(paste("{",alpha_param,",",beta_param,"}", sep = ""),length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mypdf <- do.call(rbind,df_list)
df_list_2 <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- pbeta(x_vals,alpha_param,beta_param)
type <- rep("cdf", length(y_val))
tuple <- rep(paste("{",alpha_param,",",beta_param,"}", sep = ""),length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mycdf <- do.call(rbind,df_list_2)
mydf <- rbind(mypdf, mycdf)
my_plot <- ggplot(mydf, aes(x=x_vals, y=y_val, color = tuple)) +
geom_line() +
facet_grid(tuple ~ type, scales = "free", labeller = label_bquote(rows = paste("{", alpha, ",", beta, "} = ", .(substitute(tuple)), collapse = ""))) +
theme(strip.text = element_text(size = 11)) +
theme(axis.text=element_text(size=10),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22)) +
labs(x="\nx value", y="Distribution Function Value\n",title="Beta Distribution Functions\n")
my_plot
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
str(mydf)
mydf$tuple
mydf$tuple <- factor(mydf$tuple, levels = c({0.5,0.5} {5,1} {1,3} {2,2} {2,5}))
levels(mydf$tuple)
mydf$tuple <- factor(mydf$tuple, levels = levels(mydf$tuple), labels = levels(mydf$tuple))
mydf$tuple
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
mydf$tuple
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
str(mydf$tuple)
mydf$tuple
str(mydf$tuple)
parse(text="120 <= alpha~phantom() <= 150")
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
mydf$tuple
source('~/Desktop/EDA/Hw5_2.R', echo=TRUE)
linegraphs_weekday_means_2 <- function(roomtype, df=hotel_df) {
my_room_data <- filter(df, room==roomtype)
myggplot <- ggplot(my_room_data, aes(x=yearday, y=as.numeric(room_utilization_rate))) +        scale_y_continuous(breaks = seq(0, 1, by = 0.25), labels= percent) +
scale_x_continuous(breaks = seq(0, 365, by = 30)) +
ylab("Min, Mean, and Max Utilization \n") +
xlab("\n Day of Year") +
stat_summary(fun.ymin = min, fun.ymax = max, geom = "ribbon", alpha = 1.0, fill = "grey")     + stat_summary(fun.y = mean, geom = "line") +
labs(title = paste("Room ",roomtype, " Utilization Rates\n", sep = "")) +
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=11),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
ggsave(paste("linegraph_mean_", roomtype, ".pdf", sep=""),width = 11, height = 8.5)
}
lapply(difrooms,linegraphs_weekday_means_2,hotel_df)
toluca  <- read.table()
setwd("~/Desktop/EDA")
toluca  <- read.table("toluca.txt", sep = "", header = FALSE)
lm_toluca  <- lm(workHours ~ lotSize, data = toluca)
str(toluca)
toluca  <- read.table("toluca.txt", sep = "", header = TRUE)
str(toluca)
toluca  <- read.table("toluca.txt", sep = "", header = FALSE)
str(toluca)
lm_toluca  <- lm(toluca$V2 ~ toluca$V1, data = toluca)
plot(toluca$lotSize , toluca$workHours , xlab = "Lot Size" ,
ylab = "Work Hours" , main = "Toluca Company: Refrigeration Manufacturer")
plot(toluca$V2 , toluca$V1 , xlab = "Lot Size" ,
ylab = "Work Hours" , main = "Toluca Company: Refrigeration Manufacturer")
plot(toluca$V1 , toluca$V2 , xlab = "Lot Size" ,
ylab = "Work Hours" , main = "Toluca Company: Refrigeration Manufacturer")
abline(lm_toluca)
lm_toluca
summary(lm_toluca)
?glm
library(ggplot2)
?ggsave
install.packages(rsconnect)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='shivathudi',
token='3B69A84B5187A8E23BEDE0FD066C4CDA',
secret='x8Te3Q6T6B7zKZAQDky5be1jX6aJhZ5AvNASTgNR')
shiny::runApp('~/Desktop/Data_Viz/hw2')
setwd("~/Desktop/Data_Viz/hw2")
runApp()
runApp()
runApp('shivathudi-hw2')
runApp('shivathudi-hw2')
setwd("~/Desktop/BootCamp Courses/EDA")
setwd("~/Desktop/BootCamp Courses/EDA/hotelData")
theme(plot.title = element_text(size=22))
library(ggplot2)
## PDFS
x <- seq(0,1,length=100)
beta1 <- dbeta(x, 0.5, 0.5)
beta2 <- dbeta(x, 5, 1)
beta3 <- dbeta(x, 1, 3)
beta4 <- dbeta(x, 2, 2)
beta5 <- dbeta(x, 2, 5)
df <- data.frame(x,beta1, beta2, beta3, beta4, beta5)
df <- gather(df, func, val, -x)
greeks <- list(bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",0.5,",",0.5, "}", sep = "")), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",5,",",1, "}", sep = "")), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",1,",",3, "}", sep = "")), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",2,",",2, "}", sep = "")), collapse = "")),bquote(paste("{", alpha, ",", beta, "} = ", .(paste("{",2,",",5, "}", sep = "")), collapse = "")))
gg <- ggplot(df, aes(x=x, y=val, group=func)) +
geom_line(aes(color=func)) +
scale_y_continuous(expand=c(0, 0)) +
scale_color_manual(name="Beta params",
values=c("red", "green", "blue", "violet", "black"),
labels=greeks)+
labs(x="\nx value", y="PDF\n",
title="Beta Probability Distribution Functions\n")+
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
gg
ggsave("Beta Probability Distribution Functions.png")
### CDFS
x <- seq(0,1,length=100)
beta1 <- pbeta(x, 0.5, 0.5)
beta2 <- pbeta(x, 5, 1)
beta3 <- pbeta(x, 1, 3)
beta4 <- pbeta(x, 2, 2)
beta5 <- pbeta(x, 2, 5)
df <- data.frame(x,beta1, beta2, beta3, beta4, beta5)
df <- gather(df, func, val, -x)
gg <- ggplot(df, aes(x=x, y=val, group=func))+
geom_line(aes(color=func))+scale_y_continuous(expand=c(0, 0))+
scale_color_manual(name="Beta params",
values=c("red", "green", "blue", "violet", "black"),
labels=greeks)+
labs(x="\nx value", y="CDF\n",
title="Beta Cumulative Distribution Functions\n")+
theme(strip.text = element_text(size = 18, angle = 90)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22))
gg
ggsave("Beta Cumulative Distribution Functions.png")
### FACETED PDFS AND CDFS
x_vals <- seq(0,1,length=100)
#These tuple values can be replaced and the graphs will update accordingly
my_tuple_values <- list(c(0.5,0.5), c(5,1), c(1,3), c(2,2), c(2,5))
mydf <- data.frame()
df_list <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- dbeta(x_vals,alpha_param,beta_param)
type <- rep("pdf", length(y_val))
tuple <- rep(paste("{",alpha_param,",",beta_param,"}", sep = ""),length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mypdf <- do.call(rbind,df_list)
df_list_2 <- lapply(my_tuple_values, function(x, df=mydf) {
alpha_param =x[[1]]
beta_param=x[[2]]
y_val <- pbeta(x_vals,alpha_param,beta_param)
type <- rep("cdf", length(y_val))
tuple <- rep(paste("{",alpha_param,",",beta_param,"}", sep = ""),length(y_val))
new_df <- data.frame(x_vals,y_val, type, tuple)
new_df
})
mycdf <- do.call(rbind,df_list_2)
mydf <- rbind(mypdf, mycdf)
mydf$tuple <- as.character(mydf$tuple)
my_plot <- ggplot(mydf, aes(x=x_vals, y=y_val, color = tuple)) +
geom_line() +
facet_grid(tuple ~ type, scales = "free", labeller = label_bquote(paste("{", alpha, ",", beta, "} = ", .(tuple), collapse = ""))) +
theme(strip.text = element_text(size = 13)) +
theme(axis.text=element_text(size=15),axis.title=element_text(size=20)) +
theme(plot.title = element_text(size=22)) +
labs(x="\nx value", y="Distribution Function Value\n",title="Beta Distribution Functions\n")
my_plot
ggsave("Beta Distribution Functions.png")
library(dplyr)
library(plyr)
?gather
source('~/Desktop/BootCamp Courses/EDA/hotelData/beta_plots.R', echo=TRUE)
runApp('~/Desktop/github/data-visualization/lifeexp_fert_shiny_ggvis')
setwd("~/Desktop/github/data-visualization/commercial_breaks_tv")
source('~/Desktop/github/data-visualization/commercial_breaks_tv/tvads-plot.R', echo=TRUE)
ggsave("audience_dips.png")
?arrangeGrob
arrangeGrob(pl1, pl, ncol=1, nrow =2, heights = c(0.7, 0.3))
ggsave("audience_dips.png")
g = arrangeGrob(pl1, pl, ncol=1, nrow =2, heights = c(0.7, 0.3))
ggsave("audience_dips.png", g)
